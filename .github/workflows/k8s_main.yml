name: Update modules/k8s

on:
  push:
    branches:
      - main
    paths:
      - 'modules/k8s/**'
  workflow_dispatch:

jobs:
  build:
    name: Test modules/k8s
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v42
    
    - name: Run tests
      env:
        GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
        GOOGLE_REGION: ${{ secrets.GOOGLE_REGION }}
        GOOGLE_ZONE:  ${{ secrets.GOOGLE_ZONE }}
        GOOGLE_CREDENTIALS:  ${{ secrets.GOOGLE_CREDENTIALS }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ secrets.AWS_REGION }}
        PR_BRANCH: "main"
        ENTIGO_INFRALIB_DESTROY: false
      run: |
        source common/generate_config.sh
        prepare_agent
        echo "sources:
            - url: https://github.com/entigolabs/entigo-infralib
              version: main
              force_version: true
        steps:" > agents/config.yaml

        default_aws_conf
        default_google_conf
        default_k8s_conf

        docker pull $ENTIGO_INFRALIB_IMAGE
        run_agents apps
        docker pull $KUBESCORE_IMAGE

        google_auth_login
        
        gcloud container clusters get-credentials pri-infra-gke --region $GOOGLE_REGION
        gcloud container clusters get-credentials biz-infra-gke --region $GOOGLE_REGION
        aws eks update-kubeconfig --region $AWS_REGION --name pri-infra-eks
        aws eks update-kubeconfig --region $AWS_REGION --name biz-infra-eks
        
        PIDS=""
        echo "Changed modules:"
        for module in $(for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "$file" | grep "modules/k8s" | cut -d'/' -f1-3
        done | sort -u )
        do
          ${module}/test.sh testonly &
          PIDS="$PIDS $!=${module}"
        done

        FAIL=""
        for p in $PIDS; do
            pid=$(echo $p | cut -d"=" -f1)
            name=$(echo $p | cut -d"=" -f2)
            wait $pid || FAIL="$FAIL $p"
            if [[ $FAIL == *$p* ]]
            then
              echo "$p Failed"
            else
              echo "$p Done"
            fi
        done
        if [ "$FAIL" != "" ]
        then
          echo "FAILED TESTS $FAIL"
          exit 2
        fi

    - name: Get latest release
      id: get_latest_release
      uses: actions/github-script@v6
      with:
        script: |
          const latestStableRelease = await github.rest.repos.getLatestRelease({ owner: context.repo.owner, repo: context.repo.repo });
          const versionString = '' + latestStableRelease.data.tag_name;
          const regex = /^v(\d+)\.(\d+)\.(\d+)$/;
          const match = versionString.match(regex);
          const major = parseInt(match[1], 10);
          const minor = parseInt(match[2], 10);
          const patch = parseInt(match[3], 10) + 1;
          const new_version = `v${major}.${minor}.${patch}`
          core.setOutput('new_version',  new_version);
    - name: Authenticate with GitHub CLI
      run: gh auth login --with-token <<< ${{ secrets.GITHUB_TOKEN }}
      if: ${{ github.event_name == 'push' }}

    - name: Create Release
      id: create_release
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a modules/k8s-${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }} -m "Release modules/k8s-${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }}"
        git push origin modules/k8s-${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }}
        RELEASE_URL=$(gh release create modules/k8s-${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }} \
        --title "Release modules/k8s-${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }}" \
        --generate-notes \
        --draft=false \
        --latest=false \
        --prerelease=true)
        echo "RELEASE_URL=$RELEASE_URL" >> $GITHUB_ENV
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: ${{ github.event_name == 'push' }}
    - name: Slack Success Release Message
      if: ${{ success() && github.event_name == 'push' }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: 'success'
        SLACK_MESSAGE: 'Released modules/k8s-${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }} ${{ env.RELEASE_URL }}'
        SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_ICON_EMOJI: ${{ secrets.SLACK_ICON_EMOJI }}
        MSG_MINIMAL: actions url,commit
        SLACK_FOOTER: ""
    - name: Slack Failed Message
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: 'failure'
        SLACK_MESSAGE: 'Failed to update modules/k8s-${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }} on main'
        SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_ICON_EMOJI: ${{ secrets.SLACK_ICON_EMOJI }}
        SLACK_FOOTER: ""
