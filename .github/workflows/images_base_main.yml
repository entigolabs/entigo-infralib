name: Update images/base

on:
  push:
    branches:
      - main
    paths:
      - 'images/base/**'
  workflow_dispatch:

jobs:
  build:
    name: Test images/base
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Get latest release
      id: get_latest_release
      uses: actions/github-script@v6
      with:
        script: |
          const latestStableRelease = await github.rest.repos.getLatestRelease({ owner: context.repo.owner, repo: context.repo.repo });
          const versionString = '' + latestStableRelease.data.tag_name;
          const regex = /^v(\d+)\.(\d+)\.(\d+)$/;
          const match = versionString.match(regex);
          const major = parseInt(match[1], 10);
          const minor = parseInt(match[2], 10);
          const patch = parseInt(match[3], 10) + 1;
          const new_version = `v${major}.${minor}.${patch}`
          core.setOutput('new_version',  new_version);

    - name: Build and push image
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ secrets.AWS_REGION }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin && cd images/base/ && docker build -t entigolabs/entigo-infralib-base:${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }} . && docker push entigolabs/entigo-infralib-base:${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }}
       
    - name: Authenticate with GitHub CLI
      run: gh auth login --with-token <<< ${{ secrets.GITHUB_TOKEN }}
      if: ${{ github.event_name == 'push' }}

    - name: Create Release
      id: create_release
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a images/base-${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }} -m "Release images/base-${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }}"
        git push origin images/base-${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }}
        RELEASE_URL=$(gh release create images/base-${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }} \
        --title "Release images/base-${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }}" \
        --generate-notes \
        --draft=false \
        --latest=false \
        --prerelease=true)
        echo "RELEASE_URL=$RELEASE_URL" >> $GITHUB_ENV
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: ${{ github.event_name == 'push' }}
        
    - name: Slack Success Release Message
      if: ${{ success() && github.event_name == 'push' }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: 'success'
        SLACK_MESSAGE: 'Released images/base-${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }} ${{ env.RELEASE_URL }}'
        SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_ICON_EMOJI: ${{ secrets.SLACK_ICON_EMOJI }}
        MSG_MINIMAL: actions url,commit
        SLACK_FOOTER: ""
    - name: Slack Failed Message
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: 'failure'
        SLACK_MESSAGE: 'Failed to update images/base-${{ steps.get_latest_release.outputs.new_version }}-rc${{ github.run_number }} on main'
        SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_ICON_EMOJI: ${{ secrets.SLACK_ICON_EMOJI }}
        SLACK_FOOTER: ""
