name: Release

on:
  workflow_dispatch:

jobs:
  nuke:
    name: Nuke AWS account
    runs-on: ubuntu-latest
    steps:
    - name: Slack Started Message
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: '#EBEB00'
        SLACK_MESSAGE: 'Release Nuking started of entigo-infralib AWS account!'
        SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_ICON_EMOJI: ${{ secrets.SLACK_ICON_EMOJI }}
        MSG_MINIMAL: actions url,commit
        SLACK_FOOTER: ""
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Nuke entigo-infralib account
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ secrets.AWS_REGION }}
      run: |
        modules/aws/nuke.sh
    - name: Slack Failed To Nuke Message
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: 'failure'
        SLACK_MESSAGE: 'Failed to Nuke the entigo-infralib account!'
        SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_ICON_EMOJI: ${{ secrets.SLACK_ICON_EMOJI }}
        SLACK_FOOTER: ""

  fresh_install_main:
    name: Install fresh main
    needs: nuke
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install resources based on main
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ secrets.AWS_REGION }}
        ENTIGO_INFRALIB_DESTROY: false
      run: |
        modules/aws/vpc/test.sh
        modules/aws/eks/test.sh
    - name: Slack Failed To Install Main
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: 'failure'
        SLACK_MESSAGE: 'Fresh install of resources from main failed after Nuke.'
        SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_ICON_EMOJI: ${{ secrets.SLACK_ICON_EMOJI }}
        SLACK_FOOTER: ""
  nuke_again:
    name: Nuke AWS account again
    needs: fresh_install_main
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Nuke entigo-infralib account
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ secrets.AWS_REGION }}
      run: |
        modules/aws/nuke.sh
    - name: Slack Failed To Nuke Message
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: 'failure'
        SLACK_MESSAGE: 'Failed to Nuke the entigo-infralib account second time!'
        SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_ICON_EMOJI: ${{ secrets.SLACK_ICON_EMOJI }}
        SLACK_FOOTER: ""
  install_stable:
    name: Install stable release
    needs: nuke_again
    runs-on: ubuntu-latest
    steps:
    - name: Get latest release
      uses: actions/github-script@v4
      with:
        script: |
          const { data: releases } = await github.repos.listReleases({ owner: context.repo.owner, repo: context.repo.repo });
          const latestStableRelease = releases.find(release => !release.prerelease);
          if (latestStableRelease) {
            core.setOutput('release_tag', latestStableRelease.tag_name);
            core.info('Latest stable release tag: ' + latestStableRelease.tag_name);
          } else {
            core.setFailed('No stable releases found');
          }

    - name: Checkout code of latest release
      uses: actions/checkout@v2
      with:
        ref: ${{ steps.get_latest_release.outputs.release_tag }}
    - name: Create resources based on latest release
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ secrets.AWS_REGION }}
        ENTIGO_INFRALIB_DESTROY: false
      run: |
        modules/aws/vpc/test.sh 
        modules/aws/eks/test.sh 
    - name: Slack Failed To Install Latest Release Message
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: 'failure'
        SLACK_MESSAGE: 'Fresh installation of latest release failed after Nuke.'
        SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_ICON_EMOJI: ${{ secrets.SLACK_ICON_EMOJI }}
        SLACK_FOOTER: ""
  install_main:
    name: Upgrade stable to main
    needs: install_stable
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Update resources based on main code
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ secrets.AWS_REGION }}
        ENTIGO_INFRALIB_DESTROY: false
      run: |
        modules/aws/vpc/test.sh
        modules/aws/eks/test.sh
    - name: Slack Failed To Update to Main Message
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: 'failure'
        SLACK_MESSAGE: 'Updating from latest release to main failed after Nuke.'
        SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_ICON_EMOJI: ${{ secrets.SLACK_ICON_EMOJI }}
        SLACK_FOOTER: ""
  release:   
    runs-on: ubuntu-latest
    needs: fresh_install_main
    name: Release
    steps:
    - name: Check out code
      uses: actions/checkout@v2
      
    - name: Get last non-pre-release tag
      id: last_release
      run: |
        git fetch --tags
        echo "::set-output name=tag::$(git describe --abbrev=0 --tags --match 'v[0-9]*' --exclude='*-*')"
        
    - name: Determine next version
      id: next_version
      run: echo "::set-output name=version::$(semver bump patch "${{ steps.last_release.outputs.tag }}")"

      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.next_version.outputs.version }}
        release_name: Release ${{ steps.next_version.outputs.version }}
        draft: false
        prerelease: false
    - name: Slack Success Release Message
      if: ${{ success() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: 'success'
        SLACK_MESSAGE: 'Released ${{ steps.next_version.outputs.version }} ${{ steps.create_release.outputs.html_url }}'
        SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_ICON_EMOJI: ${{ secrets.SLACK_ICON_EMOJI }}
        MSG_MINIMAL: actions url,commit
        SLACK_FOOTER: ""
