name: Nuke

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  nuke:
    name: Nuke AWS account
    runs-on: ubuntu-latest
    steps:
    - name: Slack Started Message
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: '#EBEB00'
        SLACK_MESSAGE: 'Nuking started of entigo-infralib AWS account!'
        SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_ICON_EMOJI: ${{ secrets.SLACK_ICON_EMOJI }}
        MSG_MINIMAL: actions url,commit
        SLACK_FOOTER: ""
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Nuke entigo-infralib account
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ secrets.AWS_REGION }}
      run: |
        #modules/aws/nuke.sh
        echo "Fake nuke"
    - name: Slack Failed To Nuke Message
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: 'failure'
        SLACK_MESSAGE: 'Failed to Nuke the entigo-infralib account!'
        SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_ICON_EMOJI: ${{ secrets.SLACK_ICON_EMOJI }}
        SLACK_FOOTER: ""
  install_stable:
    name: Install stable release
    needs: nuke
    runs-on: ubuntu-latest
    steps:
    - name: Get latest release
      id: get_latest_release
      uses: actions/github-script@v6
      with:
        script: |
          const latestStableRelease = await github.rest.repos.getLatestRelease({ owner: context.repo.owner, repo: context.repo.repo });
          if (latestStableRelease) {
            core.setOutput('release_tag', latestStableRelease.data.tag_name);
            core.info('Latest stable release tag: ' + latestStableRelease.data.tag_name);
          } else {
            core.setFailed('No stable releases found');
          }

    - name: Checkout code of latest release
      uses: actions/checkout@v2
      with:
        ref: ${{ steps.get_latest_release.outputs.release_tag }}
    - name: Create resources based on latest release
      id: create_latest_release
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ secrets.AWS_REGION }}
        ENTIGO_INFRALIB_DESTROY: false
      run: |
        echo "Current stable release commit is $(git rev-parse HEAD)"
        #modules/aws/vpc/test.sh 
        #modules/aws/eks/test.sh 
    - name: Slack Failed To Install Latest Release Message
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: 'failure'
        SLACK_MESSAGE: 'Fresh installation of latest release failed after Nuke.'
        SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_ICON_EMOJI: ${{ secrets.SLACK_ICON_EMOJI }}
        SLACK_FOOTER: ""
  install_main:
    name: Upgrade stable to main
    needs: install_stable
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        ref: main
    - name: Update resources based on main code
      id: update_to_main
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ secrets.AWS_REGION }}
        ENTIGO_INFRALIB_DESTROY: false
      run: |
        #modules/aws/vpc/test.sh
        #modules/aws/eks/test.sh
        echo "Current main commit is $(git rev-parse HEAD)"
    - name: Slack Success Message
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: 'success'
        SLACK_MESSAGE: 'Nuke is done. Latest release updated to main.'
        SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_ICON_EMOJI: ${{ secrets.SLACK_ICON_EMOJI }}
        MSG_MINIMAL: actions url,commit
        SLACK_FOOTER: ""
    - name: Slack Failed To Update to Main Message
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: 'failure'
        SLACK_MESSAGE: 'Updating from latest release to main failed after Nuke.'
        SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_ICON_EMOJI: ${{ secrets.SLACK_ICON_EMOJI }}
        SLACK_FOOTER: ""

  release:   
    runs-on: ubuntu-latest
    needs: install_main
    name: Release
    steps:
    - name: Get latest release
      id: get_latest_release
      uses: actions/github-script@v6
      with:
        script: |
          const latestStableRelease = await github.rest.repos.getLatestRelease({ owner: context.repo.owner, repo: context.repo.repo });
          const currentMain =   await github.rest.repos.getBranch({ owner: context.repo.owner, repo: context.repo.repo, branch: "main" });
          const currentStable = await github.rest.repos.getCommit({ owner: context.repo.owner, repo: context.repo.repo, ref: 'refs/tags/' + latestStableRelease.data.tag_name });
          
          if (currentStable) {
            core.setOutput('current_version_tag', latestStableRelease.data.tag_name);
            
            if (currentMain) {
              core.setOutput('release_tag', latestStableRelease.data.tag_name);
              core.info('Latest stable release tag: ' + currentStable.data.sha);
              core.info('Main branch commit: ' +  currentMain.data.commit.sha);
              if ( currentStable.data.sha != currentMain.data.commit.sha) {
                core.info('Latest release is not the same as main branch, need to make a new release');
                core.setOutput('new_release_needed', "true");

              } else {
                core.info('Latest release is same as main branch, no need to make a new release');
                core.setOutput('new_release_needed', "false");
              }
            } else {
               core.setFailed('No main branch found');
            }
          } else {
            core.setFailed('No stable releases found');
          }
    - name: Determine next version
      id: next_version
      run: |
        new_version=$(semver bump patch "${{ steps.get_latest_release.outputs.current_version_tag }}")
        echo "Next version will be $new_version)"
        echo "{version}=$new_version" >> $GITHUB_OUTPUT
      if: ${{ steps.get_latest_release.outputs.new_release_needed == 'true' }}
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.next_version.outputs.version }}
        release_name: Release ${{ steps.next_version.outputs.version }}
        draft: false
        prerelease: false
      if: ${{ steps.get_latest_release.outputs.new_release_needed == 'true' }}
    - name: Slack Success Release Message
      if: ${{ success() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: 'success'
        SLACK_MESSAGE: 'Released ${{ steps.next_version.outputs.version }} ${{ steps.create_release.outputs.html_url }}'
        SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_ICON_EMOJI: ${{ secrets.SLACK_ICON_EMOJI }}
        MSG_MINIMAL: actions url,commit
        SLACK_FOOTER: ""
