name: Stable

on:
  schedule:
    - cron: "0 5 * * 1-5"
  workflow_dispatch:

jobs:
  install_stable_aws:
    name: Install stable AWS
    runs-on: ubuntu-latest
    steps:
    - name: Get latest release
      id: get_latest_release
      uses: actions/github-script@v6
      with:
        script: |
          const latestStableRelease = await github.rest.repos.getLatestRelease({ owner: context.repo.owner, repo: context.repo.repo });
          if (latestStableRelease) {
            core.setOutput('release_tag', latestStableRelease.data.tag_name);
            core.info('Latest stable release tag: ' + latestStableRelease.data.tag_name);
          } else {
            core.setFailed('No stable releases found');
          }

    - name: Checkout code of latest release
      uses: actions/checkout@v3
      with:
        ref: ${{ steps.get_latest_release.outputs.release_tag }}
    - name: Create resources based on latest release
      id: create_latest_release
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ secrets.AWS_REGION }}
        PR_BRANCH: "main"
        ENTIGO_INFRALIB_DESTROY: false
      run: |
        echo "Current stable release commit is $(git rev-parse HEAD)"
        PIDS=""
        modules/aws/cost-alert/test.sh &
        PIDS="$PIDS $!"
        modules/aws/hello-world/test.sh &
        PIDS="$PIDS $!"
        modules/aws/vpc/test.sh &
        PIDS="$PIDS $!"
        FAIL=0
        for p in $PIDS; do
            wait $p || let "FAIL+=1"
            echo $p $FAIL
        done
        if [ "$FAIL" -ne 0 ]
        then
          echo "FAILED JOBS $FAIL"
          exit 1
        fi
        PIDS=""
        modules/aws/route53/test.sh &
        PIDS="$PIDS $!"
        modules/aws/eks/test.sh &
        PIDS="$PIDS $!"
        FAIL=0
        for p in $PIDS; do
            wait $p || let "FAIL+=1"
            echo $p $FAIL
        done
        if [ "$FAIL" -ne 0 ]
        then
          echo "FAILED JOBS $FAIL"
          exit 1
        fi
        PIDS=""
        modules/aws/ec2/test.sh &
        PIDS="$PIDS $!"
        modules/aws/crossplane/test.sh &
        PIDS="$PIDS $!"
        FAIL=0
        for p in $PIDS; do
            wait $p || let "FAIL+=1"
            echo $p $FAIL
        done
        if [ "$FAIL" -ne 0 ]
        then
          echo "FAILED JOBS $FAIL"
          exit 1
        fi
    - name: Slack Failed To Install Latest Release Message
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: 'failure'
        SLACK_MESSAGE: 'Fresh installation of latest release failed after Nuke for AWS.'
        SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_ICON_EMOJI: ${{ secrets.SLACK_ICON_EMOJI }}
        SLACK_FOOTER: ""

  install_stable_google:
    name: Install stable Google
    runs-on: ubuntu-latest
    steps:
    - name: Get latest release
      id: get_latest_release
      uses: actions/github-script@v6
      with:
        script: |
          const latestStableRelease = await github.rest.repos.getLatestRelease({ owner: context.repo.owner, repo: context.repo.repo });
          if (latestStableRelease) {
            core.setOutput('release_tag', latestStableRelease.data.tag_name);
            core.info('Latest stable release tag: ' + latestStableRelease.data.tag_name);
          } else {
            core.setFailed('No stable releases found');
          }

    - name: Checkout code of latest release
      uses: actions/checkout@v3
      with:
        ref: ${{ steps.get_latest_release.outputs.release_tag }}
    - name: Create resources based on latest release
      id: create_latest_release
      env:
        GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
        GOOGLE_REGION: ${{ secrets.GOOGLE_REGION }}
        GOOGLE_ZONE:  ${{ secrets.GOOGLE_ZONE }}
        GOOGLE_CREDENTIALS:  ${{ secrets.GOOGLE_CREDENTIALS }}
        PR_BRANCH: "main"
        ENTIGO_INFRALIB_DESTROY: false
      run: |
        echo "Current stable release commit is $(git rev-parse HEAD)"
        PIDS=""
        modules/google/services/test.sh &
        PIDS="$PIDS $!"
        modules/google/vpc/test.sh
        modules/google/gke/test.sh
        modules/google/dns/test.sh &
        PIDS="$PIDS $!"
        modules/google/crossplane/test.sh &
        PIDS="$PIDS $!"
        FAIL=0
        for p in $PIDS; do
            wait $p || let "FAIL+=1"
            echo $p $FAIL
        done
        if [ "$FAIL" -ne 0 ]
        then
          echo "FAILED JOBS $FAIL"
          exit 1
        fi
    - name: Slack Failed To Install Latest Release Message
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: 'failure'
        SLACK_MESSAGE: 'Fresh installation of latest release failed after Nuke for Google.'
        SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_ICON_EMOJI: ${{ secrets.SLACK_ICON_EMOJI }}
        SLACK_FOOTER: ""
  
  install_stable_k8s:
    needs: [install_stable_google,install_stable_aws]
    name: Install stable K8s
    runs-on: ubuntu-latest
    steps:
    - name: Get latest release
      id: get_latest_release
      uses: actions/github-script@v6
      with:
        script: |
          const latestStableRelease = await github.rest.repos.getLatestRelease({ owner: context.repo.owner, repo: context.repo.repo });
          if (latestStableRelease) {
            core.setOutput('release_tag', latestStableRelease.data.tag_name);
            core.info('Latest stable release tag: ' + latestStableRelease.data.tag_name);
          } else {
            core.setFailed('No stable releases found');
          }

    - name: Checkout code of latest release
      uses: actions/checkout@v3
      with:
        ref: ${{ steps.get_latest_release.outputs.release_tag }}
    - name: Create resources based on latest release
      id: create_latest_release
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION:  ${{ secrets.AWS_REGION }}
        GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
        GOOGLE_REGION: ${{ secrets.GOOGLE_REGION }}
        GOOGLE_ZONE:  ${{ secrets.GOOGLE_ZONE }}
        GOOGLE_CREDENTIALS:  ${{ secrets.GOOGLE_CREDENTIALS }}
        PR_BRANCH: "main"
        ENTIGO_INFRALIB_DESTROY: false
      run: |
        echo "Current stable release commit is $(git rev-parse HEAD)"
        PIDS=""
        providers/test.sh &
        PIDS="$PIDS $!"
        modules/k8s/hello-world/test.sh &
        PIDS="$PIDS $!"
        modules/k8s/aws-storageclass/test.sh &
        PIDS="$PIDS $!"
        modules/k8s/metrics-server/test.sh &
        PIDS="$PIDS $!"
        modules/k8s/istio-base/test.sh &
        PIDS="$PIDS $!"
        modules/k8s/istio-istiod/test.sh &
        PIDS="$PIDS $!"
        modules/k8s/crossplane-core/test.sh &
        PIDS="$PIDS $!"
        modules/k8s/google-gateway/test.sh &
        PIDS="$PIDS $!"
        FAIL=0
        for p in $PIDS; do
            wait $p || let "FAIL+=1"
            echo $p $FAIL
        done
        if [ "$FAIL" -ne 0 ]
        then
          echo "FAILED JOBS $FAIL"
          exit 1
        fi
        PIDS=""

        modules/k8s/crossplane-aws/test.sh &
        PIDS="$PIDS $!"
        modules/k8s/crossplane-google/test.sh &
        PIDS="$PIDS $!"
        FAIL=0
        for p in $PIDS; do
            wait $p || let "FAIL+=1"
            echo $p $FAIL
        done
        if [ "$FAIL" -ne 0 ]
        then
          echo "FAILED JOBS $FAIL"
          exit 1
        fi
        PIDS=""
        
        modules/k8s/aws-alb/test.sh
        modules/k8s/istio-gateway/test.sh
        modules/k8s/external-dns/test.sh
        modules/k8s/external-secrets/test.sh &
        PIDS="$PIDS $!"
        modules/k8s/argocd/test.sh &
        PIDS="$PIDS $!"
        modules/k8s/loki/test.sh &
        PIDS="$PIDS $!"
        modules/k8s/mimir/test.sh &
        PIDS="$PIDS $!"
        modules/k8s/grafana/test.sh &
        PIDS="$PIDS $!"
        modules/k8s/prometheus/test.sh &
        PIDS="$PIDS $!"
        modules/k8s/kiali/test.sh &
        PIDS="$PIDS $!"
        modules/k8s/crossplane-k8s/test.sh &
        PIDS="$PIDS $!"
        
        FAIL=0
        for p in $PIDS; do
            wait $p || let "FAIL+=1"
            echo $p $FAIL
        done
        if [ "$FAIL" -ne 0 ]
        then
          echo "FAILED JOBS $FAIL"
          exit 1
        fi
    - name: Slack Failed To Install Latest Release Message
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: 'failure'
        SLACK_MESSAGE: 'Fresh installation of latest release failed after Nuke for K8S.'
        SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_ICON_EMOJI: ${{ secrets.SLACK_ICON_EMOJI }}
        SLACK_FOOTER: ""
