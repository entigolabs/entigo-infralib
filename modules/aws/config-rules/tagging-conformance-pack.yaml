#TAGGING CONFORMANCE PACK
# Create the conformance pack
resource "aws_config_conformance_pack" "resource_tagging_compliance" {
 name = "${var.prefix}-resource-tagging-compliance"
 count = var.resource_tagging_compliance_pack_enabled ? 1 : 0
}

resource "aws_config_config_rule" "required_tags" {
  name        = "required_tags"
  description = "Ensure all listed resources have required tags"
  count = var.resource_tagging_compliance_pack_enabled ? 1 : 0

  source {
    owner             = "AWS"
    source_identifier = "REQUIRED_TAGS"
  }
  
  input_parameters = jsonencode({
    for idx, tag_key in var.required_tag_keys :
    "tag${idx + 1}Key" => tag_key
  })
  
  scope {
    compliance_resource_types = [
      "AWS::ACM::Certificate",
      "AWS::AutoScaling::AutoScalingGroup",
      "AWS::CloudFormation::Stack",
      "AWS::CodeBuild::Project",
      "AWS::DynamoDB::Table",
      "AWS::EC2::CustomerGateway",
      "AWS::EC2::Instance",
      "AWS::EC2::InternetGateway",
      "AWS::EC2::NetworkAcl",
      "AWS::EC2::NetworkInterface",
      "AWS::EC2::RouteTable",
      "AWS::EC2::SecurityGroup",
      "AWS::EC2::Subnet",
      "AWS::EC2::Volume",
      "AWS::EC2::VPC",
      "AWS::EC2::VPNConnection",
      "AWS::EC2::VPNGateway",
      "AWS::ElasticLoadBalancing::LoadBalancer",
      "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "AWS::RDS::DBInstance",
      "AWS::RDS::DBSecurityGroup",
      "AWS::RDS::DBSnapshot",
      "AWS::RDS::DBSubnetGroup",
      "AWS::RDS::EventSubscription",
      "AWS::Redshift::Cluster",
      "AWS::Redshift::ClusterParameterGroup",
      "AWS::Redshift::ClusterSecurityGroup",
      "AWS::Redshift::ClusterSnapshot",
      "AWS::Redshift::ClusterSubnetGroup",
      "AWS::S3::Bucket"
    ]
  }
}