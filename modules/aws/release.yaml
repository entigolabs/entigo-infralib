prefix: ep
sources:
    - url: https://github.com/entigolabs/entigo-infralib-release
      version: stable
steps:
    - name: net
      type: terraform
      approve: minor
      modules:
        - name: main
          source: aws/vpc
          inputs:
            azs: 2
            database_subnets: |
                ["10.24.9.0/25","10.24.9.128/25"]
            elasticache_subnets: |
                []
            enable_nat_gateway: false
            intra_subnets: |
                ["10.24.8.128/26","10.24.8.192/26"]
            one_nat_gateway_per_az: false
            private_subnets: |
                ["10.24.10.0/23","10.24.12.0/23"]
            public_subnets: |
                ["10.24.8.0/26","10.24.8.64/26"]
            vpc_cidr: 10.24.8.0/21
    - name: infra
      type: terraform
      approve: minor
      vpc:
        attach: true
      modules:
        - name: dns
          source: aws/route53
          inputs:
            parent_domain: entigo.dev
            prefix: ep-infra-dns-dev
            private_subdomain_name: dev-int
            public_subdomain_name: dev
            vpc_id: '{{ ssm.net.main.vpc_id }}'
        - name: eks
          source: aws/eks
          inputs:
            cluster_enabled_log_types: |
                []
            eks_api_access_cidrs: |
                [{{ .ssm.net.main.private_subnet_cidrs }}, "10.25.0.0/16"]
            iam_admin_role: AWSReservedSSO_AdministratorAccess_.*
            eks_cluster_public: false
            eks_db_max_size: 0
            eks_main_desired_size: 5
            eks_main_max_size: 6
            eks_mainarm_desired_size: 2
            eks_mainarm_max_size: 4
            eks_mon_max_size: 0
            eks_spot_max_size: 0
            eks_tools_max_size: 0
            prefix: ep-infra-eks-dev
        - name: crossplane
          source: aws/crossplane
          inputs:
            prefix: ep-infra-crossplane-dev
    - name: apps
      type: argocd-apps
      approve: minor
      vpc:
        attach: true
      kubernetes_cluster_name: '{{ .ssm.infra.eks.cluster_name }}'
      modules:
        - name: argocd
          source: argocd
        - name: aws-alb
          source: aws-alb
        - name: crossplane-system
          source: crossplane-core
          version: stable
        - name: crossplane-k8s
          source: crossplane-k8s
          version: stable
        - name: crossplane-aws
          source: crossplane-aws
          version: stable
        - name: external-dns
          source: external-dns
        - name: mimir
          source: mimir
          inputs:
            global:
                aws:
                    account: '{{ .ssm.infra.eks.account }}'
                    clusterOIDC: '{{ .ssm.infra.eks.oidc_provider }}'
                    region: '{{ .ssm.infra.eks.region }}'
                bucketName: '{{ .config.prefix }}-portal-mimir'
            mimir-distributed:
                gateway:
                    ingress:
                        hosts:
                            - host: mimir.{{ ssm.infra.dns.int_domain }}
                              paths:
                                - path: /
                                  pathType: Prefix
        - name: loki
          source: loki
          inputs:
            global:
                aws:
                    account: '{{ .ssm.infra.eks.account }}'
                    clusterOIDC: '{{ .ssm.infra.eks.oidc_provider }}'
                    region: '{{ .ssm.infra.eks.region }}'
                bucketName: '{{ .config.prefix }}-portal-loki-logs'
            loki:
                gateway:
                    ingress:
                        hosts:
                            - host: loki.{{ ssm.infra.dns.int_domain }}
                              paths:
                                - path: /
                                  pathType: Prefix
                loki:
                    auth_enabled: true
                    storage:
                        bucketNames:
                            admin: '{{ .config.prefix }}-portal-loki-logs'
                            chunks: '{{ .config.prefix }}-portal-loki-logs'
                            ruler: '{{ .config.prefix }}-portal-loki-logs'
                        s3:
                            region: '{{ .ssm.infra.eks.region }}'
                    storage_config:
                        aws:
                            bucketnames: '{{ .config.prefix }}-portal-loki-logs'
                            region: '{{ .ssm.infra.eks.region }}'
        - name: promtail
          source: promtail
          inputs:
            promtail:
                config:
                    clients:
                        - oauth2:
                            client_id: agent-demo-demo
                            client_secret: "{{ .output-custom./entigo-portal/test-token }}"
                            scopes:
                                - openid
                                - profile
                                - urn:zitadel:iam:org:project:id:258956464989732349:aud
                                - urn:zitadel:iam:org:projects:roles
                                - urn:zitadel:iam:user:metadata
                            token_url: https://entigo-dev-if3upz.zitadel.cloud/oauth/v2/token
                          url: https://portal.dev.entigo.dev/loki/api/v1/push
        - name: prometheus
          source: prometheus
          inputs:
            prometheus:
                server:
                    ingress:
                        hosts:
                            - prometheus.{{ ssm.infra.dns.int_domain }}
                    remoteWrite:
                        - oauth2:
                            client_id: agent-demo-demo
                            client_secret: "{{ .output-custom./entigo-portal/test-token }}"
                            scopes:
                                - openid
                                - profile
                                - urn:zitadel:iam:org:project:id:258956464989732349:aud
                                - urn:zitadel:iam:org:projects:roles
                                - urn:zitadel:iam:user:metadata
                            token_url: https://entigo-dev-if3upz.zitadel.cloud/oauth/v2/token
                          url: https://portal.dev.entigo.dev/api/v1/push
        - name: istio-base
          source: istio-base
        - name: istio-system
          source: istio-istiod
        - name: kiali
          source: kiali
        - name: generic-gw-ext
          source: istio-gateway
          inputs:
            global:
              aws:
                certificateArn: '{{ ssm.infra.dns.pub_cert_arn }}'
            gateway:
                name: generic-gw-ext
        - name: generic-gw-int
          source: istio-gateway
          inputs:
            gateway:
                name: generic-gw-int
            global:
              aws:
                groupName: internal
                scheme: internal
                certificateArn: '{{ ssm.infra.dns.int_cert_arn }}'
        - name: aws-storageclass
          source: aws-storageclass
        - name: metrics-server
          source: metrics-server
        - name: external-secrets
          source: external-secrets
          inputs:
            global:
                createClusterSecretStore: true
